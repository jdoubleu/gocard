swagger: '2.0'
info:
  description: GoCard API
  version: 1.0.0
  title: GoCard API
basePath: /api/v1
tags:
  - name: registers
    description: A collection of multiple cards belonging to one topic
  - name: cards
    description: Single cards containing questions
  - name: users
    description: Operations about user
  - name: passwords
    description: Security Operations for changing a user's password
  - name: members
    description: Members are users having access to registers
schemes:
  - http
securityDefinitions:
  api_key:
    description: Access Token/Api Key for authorization
    type: apiKey
    name: access_token
    in: query
paths:
  /registers:
    post:
      tags:
        - registers
      summary: Add a new register
      description: ''
      operationId: addRegister
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Register object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Register'
      responses:
        '200':
          description: Successfully created register
          schema:
            $ref: '#/definitions/Register'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
      security:
        - api_key: []
  '/registers/{registerId}':
    get:
      tags:
        - registers
      summary: Find register by ID
      description: Returns a single register
      operationId: getRegisterById
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of register to get
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful request
          schema:
            $ref: '#/definitions/Register'
        '400':
          description: Invalid ID
        '404':
          description: Register not found
      security:
        - api_key: []
    post:
      tags:
        - registers
      summary: Update a register by ID
      description: ''
      operationId: updateRegisterWithForm
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of register that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: body
          description: Updated name of the pet
          required: false
          schema:
            $ref: '#/definitions/Register'
      responses:
        '200':
          description: Register succesfully updated
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '404':
          description: Register with this ID not found
      security:
        - api_key: []
    delete:
      tags:
        - registers
      summary: Delete a register
      description: ''
      operationId: deleteRegister
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of register that should be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfully deleted register
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to delete this register
        '404':
          description: Register with this ID not found
      security:
        - api_key: []
  '/registers/{registerId}/cards/':
    get:
      tags:
        - registers
        - cards
      summary: Get all cards of this register
      description: Returns all cards of the given register
      operationId: getCardsOfRegister
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of register which cards to get
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successful request
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to view cards of this register
        '404':
          description: Register with this ID not found
      security:
        - api_key: []
    post:
      tags:
        - registers
        - cards
      summary: Create multiple new cards
      description: Creates multiple new cards and adds them to a register
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID register the cards should be added to
          type: integer
          format: int64
          required: true
        - name: cards
          in: body
          description: Cards to be created
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
          required: true
      responses:
        '200':
          description: Successfully created cards
          schema:
            type: array
            description: Cards with updated IDs
            items:
              $ref: '#/definitions/Card'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/MultipleValidationResponse'
        '403':
          description: Not allowed to create cards in this register
        '404':
          description: Register not found
      security:
        - api_key: []
  '/registers/{registerId}/members/':
    get:
      tags:
        - registers
        - members
      summary: Get all members of this register
      description: Returns all members of the given register
      operationId: getMembersOfRegister
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of the register
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successful request
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to view members of this register
        '404':
          description: Register with this ID not found
      security:
        - api_key: []
    put:
      tags:
        - registers
        - members
      summary: Update members of this register
      description: Updates all members with their permission of this register
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of the register
          type: integer
          format: int64
          required: true
        - name: members
          in: body
          description: Members to be updated
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
          required: true
      responses:
        '200':
          description: Successfully updated members
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/MultipleValidationResponse'
        '403':
          description: Not allowed to update members of this register
        '404':
          description: Register not found
      security:
        - api_key: []
    post:
      tags:
        - registers
        - members
      summary: Add member to this register
      description: Adds a new member to this register
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of the register
          type: integer
          format: int64
          required: true
        - name: member
          in: body
          description: Member to be added
          schema:
            $ref: '#/definitions/Member'
          required: true
      responses:
        '200':
          description: Successfully added member
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '403':
          description: Not allowed to add member to this register
        '404':
          description: Register not found
      security:
        - api_key: []
  '/registers/{registerId}/members/{memberId}':
    post:
      tags:
        - registers
        - members
      summary: Update member of a register
      description: Updates a specific member of a register
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of the register
          type: integer
          format: int64
          required: true
        - name: member
          in: body
          description: Member to be updated
          schema:
            $ref: '#/definitions/Member'
          required: true
      responses:
        '200':
          description: Successfully updated member
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '403':
          description: Not allowed to update member
        '404':
          description: Register or member not found
      security:
        - api_key: []
    delete:
      tags:
        - registers
        - members
      summary: Remove a member from this register
      description: Removes a member from a register
      produces:
        - application/json
      parameters:
        - name: registerId
          in: path
          description: ID of the register
          type: integer
          format: int64
          required: true
        - name: memberId
          in: path
          description: ID of the member which should be removed
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successfully removed member
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to remove this member
        '404':
          description: Register or member not found
      security:
        - api_key: []
  /cards/:
    put:
      tags:
        - cards
      summary: Update multiple cards
      description: Updates multiple cards
      produces:
        - application/json
      parameters:
        - name: cards
          in: body
          description: Cards to be updated
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
          required: true
      responses:
        '200':
          description: Successfully updated cards
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/MultipleValidationResponse'
        '403':
          description: Not allowed to update these cards
        '404':
          description: Cards not found
      security:
        - api_key: []
  '/cards/{cardId}':
    get:
      tags:
        - cards
      summary: Get a card by ID
      description: Returns the card of the supplied id
      operationId: getCard
      produces:
        - application/json
      parameters:
        - name: cardId
          in: path
          description: ID of the card to get
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successful request
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to view this card
        '404':
          description: Card not found
      security:
        - api_key: []
    post:
      tags:
        - cards
      summary: Update a card
      description: Updates a card by given id
      produces:
        - application/json
      parameters:
        - name: cardId
          in: path
          description: ID of the card which needs to be updated
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successfully updated the card
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '403':
          description: Not allowed to update this card
        '404':
          description: Card not found
      security:
        - api_key: []
    delete:
      tags:
        - cards
      summary: Delete a card
      description: Deletes a card and removes it from the register
      produces:
        - application/json
      parameters:
        - name: cardId
          in: path
          description: ID of the card which should be deleted
          type: integer
          format: int64
          required: true
      responses:
        '200':
          description: Successfully deleted the card
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to delete this card
        '404':
          description: Card not found
      security:
        - api_key: []
  /users:
    post:
      tags:
        - users
      summary: Create a user
      description: Create a new user
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successfully created the user
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
  /users/login:
    get:
      tags:
        - users
      summary: Log in the user
      description: >-
        If the credentials are valid it will return an access token for api
        calls
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: Successfully logged in
          schema:
            description: Access token
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Log out the current user
      description: Invalidates the access token
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: Successfully logged out
      security:
        - api_key: []
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Get user by user id
      description: ''
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful request
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to view this data
        '404':
          description: User not found
      security:
        - api_key: []
    put:
      tags:
        - users
      summary: Update user
      description: Updates the user data
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successfully updated the user
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '403':
          description: Not allowed to change this user's data
        '404':
          description: User not found
      security:
        - api_key: []
    delete:
      tags:
        - users
      summary: Delete user
      description: |
        Deletes a user from the system.

        After this the user will automatically be logged out
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the user which should be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfully deleted the user
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allowed to delete this user
        '404':
          description: User not found
      security:
        - api_key: []
  /users/password:
    get:
      tags:
        - users
        - passwords
      summary: Request a password reset token for the current user
      description: Generates a password reset token for the current logged in user
      operationId: requestResetTokenForUser
      produces:
        - application/json
      responses:
        '200':
          description: Successful request
          schema:
            type: string
            description: Password resetToken which can be used to reset the user's password
      security:
        - api_key: []
    post:
      tags:
        - users
        - passwords
      summary: Request a password reset token
      description: |
        Generates a link with a temporary reset token which will be send to
        the users email address.
      operationId: requestResetToken
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: Username of user
          required: true
          type: string
      responses:
        default:
          description: Successful request
    put:
      tags:
        - users
        - passwords
      summary: Change user's password
      description: |
        Updates the user's password

        You need to get a resetToken first
      operationId: changePassword
      produces:
        - application/json
      parameters:
        - name: resetToken
          in: query
          description: Token to change a password
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Password data
          required: true
          schema:
            type: object
            properties:
              oldPassword:
                type: string
                description: The old password
              newPassword:
                type: string
                description: New password
              newPasswordRepeated:
                type: string
                description: Repeat the new password
      responses:
        '200':
          description: Successfully changed password
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationResponse'
        '403':
          description: Invalid reset token
definitions:
  Register:
    type: object
    properties:
      id:
        type: integer
        format: int64
      owner:
        type: integer
        format: int64
      crdate:
        type: string
        format: date-time
      title:
        type: string
      description:
        type: string
        description: register description
  Card:
    type: object
    properties:
      id:
        type: integer
        format: int64
      author:
        type: integer
        format: int64
        description: id of user who created this card
      crdate:
        type: string
        format: date-time
      tags:
        type: array
        items:
          type: string
        uniqueItems: true
      question:
        type: string
      type:
        type: string
        description: Which type this card's content is
        enum:
          - SingleChoice
          - MultipleChoice
          - TextInput
          - SelfValidation
      content:
        type: object
        description: Anser content of this card depending of the type
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      displayName:
        type: string
      email:
        type: string
      status:
        type: string
        enum:
          - local
          - extern
  Member:
    type: object
    properties:
      userid:
        type: integer
        format: int64
        description: ID of the user
      scope:
        type: array
        items:
          type: string
          enum:
            - read
            - write
            - update
        uniqueItems: true
  ValidationResponse:
    type: object
    description: An api response usually thrown if the supplied data was invalid
    properties:
      errors:
        type: array
        description: List of errors
        items:
          type: object
          properties:
            field:
              type: string
              description: Fieldname of an invalid field
            message:
              type: string
              description: Error message belonging this field
  MultipleValidationResponse:
    type: object
    description: Same as ValidationResponse but for multiple elements
    properties:
      items:
        type: array
        items:
          type: object
          properties:
            item:
              type: integer
              description: ID of referenced element
            errors:
              $ref: '#/definitions/ValidationResponse'
