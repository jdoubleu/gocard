"use strict";
/**
 * API Client
 */

import request from 'request';
import Q from 'q';
import EventEmitter from 'events';

/*
 * Helper functions
 */
function mergeQueryParams(parameters, queryParameters) {
    if (parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters)
              .forEach(function(parameterName) {
                  queryParameters[parameterName] = parameters.$queryParameters[parameterName]
        });
    }
    return queryParameters;
}

/**
 * API Client class
 */
class {{&className}} extends EventEmitter {

    /**
     * {{&description}}
     * @class {{&className}}
     * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
     * @param {string} [domainOrOptions.domain] - The project domain
     * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
     */
    constructor(options) {
        super();

        let domain = (typeof options === 'object') ? options.domain : options;
        this.domain = domain ? domain : '{{&domain}}';
        if(this.domain.length === 0) {
            throw new Error('Domain parameter must be specified as a string.');
        }
        {{#isSecure}}
            {{#isSecureToken}}
                this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
            {{/isSecureToken}}
            {{#isSecureApiKey}}
                this.apiKey = (typeof options === 'object') ? (options.apiKey ? options.apiKey : {}) : {};
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
                this.basic = (typeof options === 'object') ? (options.basic ? options.basic : {}) : {};
            {{/isSecureBasic}}
        {{/isSecure}}
    }

    /**
     * HTTP Request
     *
     * @param {string} actionName - api action name
     * @param {string} method - http method
     * @param {string} url - url to do request
     * @param {object} parameters
     * @param {object} body - body parameters / object
     * @param {object} headers - header parameters
     * @param {object} queryParameters - querystring parameters
     * @param {object} form - form data object
     * @param {object} deferred - promise object
     */
    request(actionName, method, url, parameters, body, headers, queryParameters, form, deferred){
        let emit = this.emit;
        let ev = { proceed: true, data: {} };
        emit.apply(this, ['beforeRequest', actionName, ev].concat(Array.from(arguments)));

        if(!ev.proceed) {
            deferred.resolve(ev.data);
        }

        let req = {
            method: method,
            uri: url,
            qs: queryParameters,
            headers: headers,
            body: body
        };
        if(Object.keys(form).length > 0) {
            req.form = form;
        }
        if(typeof(body) === 'object' && !(body instanceof Buffer)) {
            req.json = true;
        }
        request(req, function(error, response, body){
            if(error) {
                emit.apply(this, ['requestFailure', actionName, req].concat(Array.from(arguments)));
                deferred.reject(error);
            } else {
                if(/^application\/(.*\\+)?json/.test(response.headers['content-type'])) {
                    try {
                        body = JSON.parse(body);
                    } catch(e) {}
                }
                emit.apply(this, ['requestSuccess', actionName, ev, body, req].concat(Array.from(arguments)));
                if(!ev.proceed) {
                    deferred.resolve(ev.data);
                }

                if(response.statusCode === 204) {
                    deferred.resolve({ response: response });
                } else if(response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        emit.apply(this, ['afterRequest', actionName, req]);
    }

    {{#isSecure}}
        {{#isSecureToken}}
            /**
            * Set Token
            *
            * @param {string} value - token's value
            * @param {string} headerOrQueryName - the header or query name to send the token at
            * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
            */
            setToken(value, headerOrQueryName, isQuery) {
                this.token.value = value;
                this.token.headerOrQueryName = headerOrQueryName;
                this.token.isQuery = isQuery;
            }
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            /**
            * Set Api Key
            *
            * @param {string} value - apiKey's value
            * @param {string} headerOrQueryName - the header or query name to send the apiKey at
            * @param {boolean} isQuery - true if send the apiKey as query param, otherwise, send as header param
            */
            setApiKey(value, headerOrQueryName, isQuery) {
                this.apiKey.value = value;
                this.apiKey.headerOrQueryName = headerOrQueryName;
                this.apiKey.isQuery = isQuery;
            }
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            /**
            * Set Basic Auth
            *
            * @param {string} username
            * @param {string} password
            */
            setBasicAuth(username, password) {
                this.basic.username = value;
                this.basic.password = password;
            }
        {{/isSecureBasic}}
        /**
        * Set Auth headers
        *
        * @param {object} headerParams - headers object
        */
        setAuthHeaders(headerParams) {
            let headers = headerParams ? headerParams : {};
        {{#isSecureToken}}
            if (!this.token.isQuery) {
                if (this.token.headerOrQueryName) {
                    headers[this.token.headerOrQueryName] = this.token.value;
                } else if (this.token.value) {
                    headers['Authorization'] = 'Bearer ' + this.token.value;
                }
            }
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            if (!this.apiKey.isQuery && this.apiKey.headerOrQueryName) {
                headers[this.apiKey.headerOrQueryName] = this.apiKey.value;
            }
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            if (this.basic.username && this.basic.password) {
                headers['Authorization'] = 'Basic ' + new Buffer(this.basic.username + ':' + this.basic.password, 'base64').toString();
            }
        {{/isSecureBasic}}
            return headers;
        }

        /**
         * Set Auth query parameters
         *
         * @param {object} queryParams - query object
         */
        setAuthQueryParams(queryParams) {
            let query = queryParams ? queryParams : {};
        {{#isSecureToken}}
            if (this.token.isQuery && this.token.headerOrQueryName) {
                query[this.token.headerOrQueryName] = this.token.value;
            }
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            if (this.apiKey.isQuery && this.apiKey.headerOrQueryName) {
                query[this.apiKey.headerOrQueryName] = this.apiKey.value;
            }
        {{/isSecureApiKey}}
            return query;
        }
    {{/isSecure}}
}

/**
 * @var {{&className}} client instance of an api client
 */
let client = new {{&className}}();

export default client;

/*
 * API Models
 */
const Models = {
    {{#definitions}}
        /**
         * {{name}}
        {{#description}}
         *
         * {{&description}}
        {{/description}}
         */
        {{#tsType}}
            {{! mst use different delimiters to avoid ambiguities when delimiters directly follow a literal brace {. }}
            {{=<% %>=}}
            <%#isObject%><%name%>: {<%#properties%>
            '<%name%>': <%#isEnum%>[/* <%&tsType%> */]<%/isEnum%><%!
            %><%^isEnum%>'<%&tsType%>'<%/isEnum%>,<%/properties%>
            },<%/isObject%>
            <%={{ }}=%>
        {{/tsType}}
        {{^tsType}}
            {{name}}: {},
        {{/tsType}}

    {{/definitions}}
};

/*
 * API Methods
 */

{{#methods}}
    {{> method}}
{{/methods}}