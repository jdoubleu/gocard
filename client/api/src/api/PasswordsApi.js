/**
 * GoCard API
 * GoCard API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/ValidationResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/ValidationResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.GoCardApi) {
      root.GoCardApi = {};
    }
    root.GoCardApi.PasswordsApi = factory(root.GoCardApi.ApiClient, root.GoCardApi.Body, root.GoCardApi.ValidationResponse);
  }
}(this, function(ApiClient, Body, ValidationResponse) {
  'use strict';

  /**
   * Passwords service.
   * @module api/PasswordsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PasswordsApi. 
   * @alias module:api/PasswordsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the requestPasswordReset operation.
     * @callback module:api/PasswordsApi~requestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a password reset token
     * Generates a link with a temporary reset token which will be send to the users email address. 
     * @param {String} username Username of user
     * @param {module:api/PasswordsApi~requestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.requestPasswordReset = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling requestPasswordReset");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordResetToken operation.
     * @callback module:api/PasswordsApi~requestPasswordResetTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a password reset token for the current user
     * Generates a password reset token for the current logged in user
     * @param {module:api/PasswordsApi~requestPasswordResetTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.requestPasswordResetToken = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePassword operation.
     * @callback module:api/PasswordsApi~updatePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user&#39;s password
     * Updates the user&#39;s password  You need to get a resetToken first 
     * @param {Number} resetToken Token to change a password
     * @param {module:model/Body} body Password data
     * @param {module:api/PasswordsApi~updatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePassword = function(resetToken, body, callback) {
      var postBody = body;

      // verify the required parameter 'resetToken' is set
      if (resetToken == undefined || resetToken == null) {
        throw new Error("Missing the required parameter 'resetToken' when calling updatePassword");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updatePassword");
      }


      var pathParams = {
      };
      var queryParams = {
        'resetToken': resetToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
