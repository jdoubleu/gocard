/**
 * GoCard API
 * GoCard API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GoCardApi) {
      root.GoCardApi = {};
    }
    root.GoCardApi.Card = factory(root.GoCardApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Card model module.
   * @module model/Card
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Card</code>.
   * @alias module:model/Card
   * @class
   * @param id {Number} 
   * @param author {Number} id of user who created this card
   * @param question {String} 
   * @param type {module:model/Card.TypeEnum} Which type this card's content is
   * @param content {Object} Anser content of this card depending of the type
   */
  var exports = function(id, author, question, type, content) {
    var _this = this;

    _this['id'] = id;
    _this['author'] = author;


    _this['question'] = question;
    _this['type'] = type;
    _this['content'] = content;
  };

  /**
   * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Card} obj Optional instance to populate.
   * @return {module:model/Card} The populated <code>Card</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('author')) {
        obj['author'] = ApiClient.convertToType(data['author'], 'Number');
      }
      if (data.hasOwnProperty('crdate')) {
        obj['crdate'] = ApiClient.convertToType(data['crdate'], 'Date');
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }
      if (data.hasOwnProperty('question')) {
        obj['question'] = ApiClient.convertToType(data['question'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], Object);
      }
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * id of user who created this card
   * @member {Number} author
   */
  exports.prototype['author'] = undefined;
  /**
   * @member {Date} crdate
   */
  exports.prototype['crdate'] = undefined;
  /**
   * @member {Array.<String>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * @member {String} question
   */
  exports.prototype['question'] = undefined;
  /**
   * Which type this card's content is
   * @member {module:model/Card.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Anser content of this card depending of the type
   * @member {Object} content
   */
  exports.prototype['content'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "SingleChoice"
     * @const
     */
    "SingleChoice": "SingleChoice",
    /**
     * value: "MultipleChoice"
     * @const
     */
    "MultipleChoice": "MultipleChoice",
    /**
     * value: "TextInput"
     * @const
     */
    "TextInput": "TextInput",
    /**
     * value: "SelfValidation"
     * @const
     */
    "SelfValidation": "SelfValidation"  };


  return exports;
}));


